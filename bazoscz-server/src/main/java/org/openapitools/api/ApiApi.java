/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.openapitools.model.Advertisement;
import org.openapitools.model.Error;
import org.openapitools.model.Seller;
import org.openapitools.model.UploadRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/check-credentials/{bid}/{bkod} : Verifies the bazos ID and bazos code are valid. If this fails you need to authenticate again.
     *
     * @param bid  (required)
     * @param bkod (required)
     * @return OK (status code 200)
     * or Bad request (status code 400)
     */
    @Operation(
            operationId = "checkCredentials",
            summary = "Verifies the bazos ID and bazos code are valid. If this fails you need to authenticate again.",
            tags = {"authentication"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/check-credentials/{bid}/{bkod}",
            produces = {"application/json"}
    )
    default ResponseEntity<Boolean> checkCredentials(
            @Parameter(name = "bid", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bid") Long bid,
            @Parameter(name = "bkod", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bkod") String bkod
    ) throws IOException, InterruptedException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * POST /api/v1/delete-advertisement : Deletes your advertisement from bazos.cz
     *
     * @param url      (required)
     * @param password (required)
     * @return OK (status code 200)
     * or Bad request (status code 400)
     */
    @Operation(
            operationId = "deleteAdvertisement",
            summary = "Deletes your advertisement from bazos.cz",
            tags = {"advertisements"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/api/v1/delete-advertisement",
            produces = {"application/json"}
    )
    default ResponseEntity<Boolean> deleteAdvertisement(
            @NotNull @Parameter(name = "url", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "url", required = true) String url,
            @NotNull @Parameter(name = "password", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "password", required = true) String password
    ) throws IOException, InterruptedException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/list-own-advertisements/{email}/{phone}/{password} : Downloads your own advertisements from bazos.cz including photos
     *
     * @param email          (required)
     * @param phone          (required)
     * @param password       (required)
     * @param downloadPhotos (required)
     * @return OK (status code 200)
     * or Bad request (status code 400)
     */
    @Operation(
            operationId = "listOwnAdvertisements",
            summary = "Downloads your own advertisements from bazos.cz including photos",
            tags = {"advertisements"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Advertisement.class)))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/list-own-advertisements/{email}/{phone}/{password}/{downloadPhotos}",
            produces = {"application/json"}
    )
    default ResponseEntity<List<Advertisement>> listOwnAdvertisements(
            @Parameter(name = "email", description = "", required = true, in = ParameterIn.PATH) @PathVariable("email") String email,
            @Parameter(name = "phone", description = "", required = true, in = ParameterIn.PATH) @PathVariable("phone") String phone,
            @Parameter(name = "password", description = "", required = true, in = ParameterIn.PATH) @PathVariable("password") String password,
            @Parameter(name = "downloadPhotos", description = "", required = true, in = ParameterIn.PATH) @PathVariable("downloadPhotos") Boolean downloadPhotos
    ) throws IOException, InterruptedException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "[ { \"date\" : \"date\", \"subCategory\" : { \"mainCategory\" : { \"id\" : 1, \"title\" : \"title\", \"url\" : \"url\" }, \"title\" : \"title\", \"url\" : \"url\" }, \"price\" : 6.0274563, \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"photos\" : [ { \"url\" : \"url\", \"content\" : \"content\" }, { \"url\" : \"url\", \"content\" : \"content\" } ], \"url\" : \"url\" }, { \"date\" : \"date\", \"subCategory\" : { \"mainCategory\" : { \"id\" : 1, \"title\" : \"title\", \"url\" : \"url\" }, \"title\" : \"title\", \"url\" : \"url\" }, \"price\" : 6.0274563, \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"photos\" : [ { \"url\" : \"url\", \"content\" : \"content\" }, { \"url\" : \"url\", \"content\" : \"content\" } ], \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * GET /api/v1/request-authentication-code/{phone} : Requests a code on your phone to authenticate for using bazos.cz
     *
     * @param phone (required)
     * @return OK (status code 200)
     * or Bad request (status code 400)
     */
    @Operation(
            operationId = "requestAuthenticationCode",
            summary = "Requests a code on your phone to authenticate for using bazos.cz",
            tags = {"authentication"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/request-authentication-code/{phone}",
            produces = {"application/json"}
    )
    default ResponseEntity<String> requestAuthenticationCode(
            @Parameter(name = "phone", description = "", required = true, in = ParameterIn.PATH) @PathVariable("phone") String phone
    ) throws IOException, InterruptedException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * POST /api/v1/scrape-own-advertisement : Scrapes your own advertisement from bazos.cz including photos
     *
     * @param url      (required)
     * @param password (required)
     * @return OK (status code 200)
     * or Bad request (status code 400)
     */
    @Operation(
            operationId = "scrapeOwnAdvertisement",
            summary = "Scrapes your own advertisement from bazos.cz including photos",
            tags = {"advertisements"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Advertisement.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/api/v1/scrape-own-advertisement",
            produces = {"application/json"}
    )
    default ResponseEntity<Advertisement> scrapeOwnAdvertisement(
            @NotNull @Parameter(name = "url", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "url", required = true) String url,
            @NotNull @Parameter(name = "password", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "password", required = true) String password,
            @NotNull @Parameter(name = "downloadPhotos", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "downloadPhotos", required = true) Boolean downloadPhotos
    ) throws IOException, InterruptedException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"date\" : \"date\", \"subCategory\" : { \"mainCategory\" : { \"id\" : 1, \"title\" : \"title\", \"url\" : \"url\" }, \"title\" : \"title\", \"url\" : \"url\" }, \"price\" : 6.0274563, \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"photos\" : [ { \"url\" : \"url\", \"content\" : \"content\" }, { \"url\" : \"url\", \"content\" : \"content\" } ], \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /api/v1/submit-authentication-code/{code}/{phone} : Sends an authentication code, obtained via text message on your phone, back to bazos.cz
     *
     * @param code  (required)
     * @param phone (required)
     * @return OK (status code 200)
     * or Bad request (status code 400)
     */
    @Operation(
            operationId = "submitAuthenticationCode",
            summary = "Sends an authentication code, obtained via text message on your phone, back to bazos.cz",
            tags = {"authentication"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/submit-authentication-code/{code}/{phone}",
            produces = {"application/json"}
    )
    default ResponseEntity<Map<String, String>> submitAuthenticationCode(
            @Parameter(name = "code", description = "", required = true, in = ParameterIn.PATH) @PathVariable("code") String code,
            @Parameter(name = "phone", description = "", required = true, in = ParameterIn.PATH) @PathVariable("phone") String phone
    ) throws IOException, InterruptedException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * POST /api/v1/upload-advertisement : Uploads an advertisement to bazos.cz
     *
     * @param uploadRequest (required)
     * @return OK (status code 200)
     * or Bad request (status code 400)
     */
    @Operation(
            operationId = "uploadAdvertisement",
            summary = "Uploads an advertisement to bazos.cz",
            tags = {"advertisements"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/api/v1/upload-advertisement",
            produces = {"application/json"}
    )
    default ResponseEntity<Integer> uploadAdvertisement(
            @NotNull @Parameter(name = "uploadRequest", description = "", required = true, in = ParameterIn.DEFAULT) @Valid @RequestBody UploadRequest uploadRequest
            ) throws IOException, InterruptedException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}
