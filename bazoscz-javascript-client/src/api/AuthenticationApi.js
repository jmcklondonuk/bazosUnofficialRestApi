/**
 * Bazos.cz API
 * This is a REST API for bazos.cz
 *
 * The version of the OpenAPI document: v0.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version v0.9.2
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkCredentials operation.
     * @callback module:api/AuthenticationApi~checkCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies the bazos ID and bazos code are valid. If this fails you need to authenticate again.
     * @param {Number} bid 
     * @param {String} bkod 
     * @param {module:api/AuthenticationApi~checkCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    checkCredentials(bid, bkod, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling checkCredentials");
      }
      // verify the required parameter 'bkod' is set
      if (bkod === undefined || bkod === null) {
        throw new Error("Missing the required parameter 'bkod' when calling checkCredentials");
      }

      let pathParams = {
        'bid': bid,
        'bkod': bkod
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/check-credentials/{bid}/{bkod}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestAuthenticationCode operation.
     * @callback module:api/AuthenticationApi~requestAuthenticationCodeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests a code on your phone to authenticate for using bazos.cz
     * @param {String} phone 
     * @param {module:api/AuthenticationApi~requestAuthenticationCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    requestAuthenticationCode(phone, callback) {
      let postBody = null;
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling requestAuthenticationCode");
      }

      let pathParams = {
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/request-authentication-code/{phone}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitAuthenticationCode operation.
     * @callback module:api/AuthenticationApi~submitAuthenticationCodeCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an authentication code, obtained via text message on your phone, back to bazos.cz
     * @param {String} code 
     * @param {String} phone 
     * @param {module:api/AuthenticationApi~submitAuthenticationCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    submitAuthenticationCode(code, phone, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling submitAuthenticationCode");
      }
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling submitAuthenticationCode");
      }

      let pathParams = {
        'code': code,
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/api/v1/submit-authentication-code/{code}/{phone}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
